#!/bin/bash

POSITIONAL_ARGS=()

ENABLE_ASAN=0

while [[ $# -gt 0 ]]; do
    case $1 in
        -a|--asan)
            ENABLE_ASAN=1
            shift
            ;;
        -d|--debug)
            ENABLE_DEBUG=1
            shift
            ;;
        -o|--optimization)
            OPTIMIZATION_LEVEL="$2"
            shift
            shift
            ;;
        -h|--help)
            echo usage: $0 [-a] [-d] [-h] [-o LEVEL] variant
            exit 1
            ;;
        *)
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
    esac
done

set -- "${POSITIONAL_ARGS[@]}"

case $1 in
    patched)
        SOURCE_TREE=patched/upx
        ;;
    vulnerable)
        SOURCE_TREE=vulnerable/upx
        ;;
    *)
        echo \'patched\' or \'vulnerable\' must be specified.
        exit 1
        ;;
esac

DOCKER_TAG="$1"

echo version = $1
if [[ "$ENABLE_ASAN" -eq 1 ]];
then
    echo asan = yes
    CMAKE_C_FLAGS='-fsanitize=address'
    CMAKE_CXX_FLAGS='-fsanitize=address'
    DOCKER_TAG+="-asan"
else
    echo asan = no
fi

if [[ "$ENABLE_DEBUG" -eq 1 ]];
then
    echo debug = yes
    DOCKER_TAG+="-debug"
    CMAKE_BUILD_TYPE=Debug
else
    echo debug = no
    CMAKE_BUILD_TYPE=Release
fi

if [[ ! "$OPTIMIZATION_LEVEL" ]];
then
    OPTIMIZATION_LEVEL="0"
fi

echo optimization level = "$OPTIMIZATION_LEVEL"
EXTRA_CFLAGS+=" -O$OPTIMIZATION_LEVEL"
EXTRA_LDFLAGS+=" -O$OPTIMIZATION_LEVEL"
DOCKER_TAG+="-O$OPTIMIZATION_LEVEL"

docker build -t buffer-overflow-dataset/cve-2023-23456:$DOCKER_TAG \
    --build-arg SOURCE_TREE="$SOURCE_TREE" \
    --build-arg CMAKE_BUILD_TYPE="$CMAKE_BUILD_TYPE" \
    --build-arg CMAKE_C_FLAGS="$CMAKE_C_FLAGS" \
    --build-arg CMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS" .
